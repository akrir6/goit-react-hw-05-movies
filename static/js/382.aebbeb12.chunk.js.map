{"version":3,"file":"static/js/382.aebbeb12.chunk.js","mappings":"+LAEaA,E,QAAkBC,EAAAA,IAAD,8L,SCEjBC,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACxB,OACI,UAACH,EAAD,YACI,uBAAIG,KACJ,SAAC,MAAD,CAAsBC,KAAM,OAGvC,C,8ICTYC,EAAcJ,EAAAA,EAAAA,GAAH,+SAcXK,EAASL,EAAAA,EAAAA,GAAD,wd,SCkBrB,EA5BiB,WACb,OAAkCM,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAQA,OAPAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAgBL,GAASM,MAAK,SAAAC,GAAa,IAAD,EACtCR,EAAY,iBAACQ,QAAD,IAACA,OAAD,EAACA,EAAUC,YAAX,QAAmB,IAC/BL,IAAS,OAACI,QAAD,IAACA,GAAAA,EAAUC,KAAKC,QAC5B,GACJ,GAAE,CAACT,KAGA,UAACL,EAAD,WACKG,GACGA,EAAUY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,OACV,UAACjB,EAAD,YACI,gBACIkB,IAAG,yCAAoCD,GACvCE,IAAKH,KAET,uBAAIA,MALOD,EADL,IAShBT,IAAS,SAACV,EAAA,EAAD,uDAGtB,C,2MC/BKwB,EAAS,mCAGR,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+FACCC,EAAS,IAAIC,gBAAgB,CACjCC,QAASJ,IAFN,kBAKoBK,IAAAA,IAAA,6BAAgCH,IALpD,uBAKKI,EALL,EAKKA,KALL,kBAMIA,GANJ,gCAQHC,QAAQC,IAAR,MARG,gFAYA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,kFACCR,EAAS,IAAIC,gBAAgB,CACjCC,QAASJ,EACTW,MAAOD,EACPE,KAAM,EACNC,eAAe,IALZ,kBAQoBR,IAAAA,IAAA,uBAA0BH,IAR9C,uBAQKI,EARL,EAQKA,KARL,kBASIA,GATJ,gCAWHC,QAAQC,IAAR,MAXG,gFAeA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4B9B,GAA5B,kFACCkB,EAAS,IAAIC,gBAAgB,CACjCC,QAASJ,IAFN,kBAKoBK,IAAAA,IAAA,gBAAmBrB,EAAnB,YAA8BkB,IALlD,uBAKKI,EALL,EAKKA,KALL,kBAMIA,GANJ,gCAQHC,QAAQC,IAAR,MARG,gFAYA,SAAenB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BL,GAA/B,kFACCkB,EAAS,IAAIC,gBAAgB,CACjCC,QAASJ,IAFN,kBAKoBK,IAAAA,IAAA,gBAAmBrB,EAAnB,oBAAsCkB,IAL1D,uBAKKI,EALL,EAKKA,KALL,kBAMIA,GANJ,gCAQHC,QAAQC,IAAR,MARG,gFAYA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA+B/B,GAA/B,kFACCkB,EAAS,IAAIC,gBAAgB,CACjCC,QAASJ,IAFN,kBAKoBK,IAAAA,IAAA,gBAAmBrB,EAAnB,oBAAsCkB,IAL1D,uBAKKI,EALL,EAKKA,KALL,kBAMIA,GANJ,gCAQHC,QAAQC,IAAR,MARG,gFArDPH,IAAAA,SAAAA,QAAyB,+B","sources":["components/BadRequest/BadRequest.styled.jsx","components/BadRequest/BadRequest.jsx","pages/CastPage/CastPage.styled.jsx","pages/CastPage/CastPage.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const BadRequestWrapper=styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align:center;\n    font-size: 18px ;\n    font-weight: 700;\n    color: #0d253f;\n`","import PropTypes from 'prop-types'\nimport { MdOutlineBrokenImage } from \"react-icons/md\";\nimport { BadRequestWrapper } from \"./BadRequest.styled\";\n\nexport const BadRequest = ({children}) => {\n    return (\n        <BadRequestWrapper>\n            <p>{children}</p>\n            <MdOutlineBrokenImage size={80} />\n        </BadRequestWrapper>\n    )\n}\n\nBadRequest.propTypes = {\n    children: PropTypes.string,    \n}","import styled from \"@emotion/styled\";\n\nexport const CastWrapper = styled.ul`\n    padding: 8px;\n    display: grid;  \n    grid-template-rows: auto;\n    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n    column-gap: 8px;\n    row-gap: 8px;\n    align-items: center;\n\n\n    border: 2px solid #01b4e4;\n    border-radius: 0 4px 4px 4px;\n\n`\nexport const CastItem=styled.li`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 100%;\n    border: 1px solid #e3e3e3;\n    color: #0d253f;\n    border-radius: 2px;\n    box-shadow: 0 2px 8px rgb(0 0 0 / 10%);\n       \n    img {\n        width: 100%;\n        display: block;\n        border-radius: 2px 2px 0 0; \n    }\n   \n    p {\n        padding: 4px 8px;\n        font-size: 12px;\n        color: inherit;\n    }\n\n   \n\n`\n","import { BadRequest } from \"components/BadRequest/BadRequest\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCredits } from \"services/themoviedbAPI\";\nimport { CastItem, CastWrapper } from \"./CastPage.styled\";\n\nconst CastPage = () => {\n    const [movieCast, setMovieCast] = useState([]);\n    const { movieId } = useParams();\n    const [empty, setEmpty] = useState(false);\n    useEffect(() => {\n        getMovieCredits(movieId).then(response => {\n            setMovieCast(response?.cast ?? []);\n            setEmpty(!response?.cast.length);\n        })\n    }, [movieId]);\n\n    return (\n        <CastWrapper>\n            {movieCast &&\n                movieCast.map(({ id, name, profile_path }) => (\n                    <CastItem key={id}>\n                        <img\n                            src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                            alt={name}\n                        />\n                        <p>{name}</p>\n                    </CastItem>\n                ))}        \n             {empty && <BadRequest>There is no information about the cast</BadRequest>}\n        </CastWrapper>\n    )\n}\n\nexport default CastPage;","import axios from 'axios';\nconst APIKEY = '7ad341c7e4bb32efb00f19fee102dc39';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies() {\n  const params = new URLSearchParams({\n    api_key: APIKEY,\n  });\n  try {\n    const { data } = await axios.get(`trending/movie/day?${params}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMoviesByQuery(searchQuery) {\n  const params = new URLSearchParams({\n    api_key: APIKEY,\n    query: searchQuery,\n    page: 1,\n    include_adult: false,\n  });\n  try {\n    const { data } = await axios.get(`search/movie?${params}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieByID(movieId) {\n  const params = new URLSearchParams({\n    api_key: APIKEY,\n  });\n  try {\n    const { data } = await axios.get(`movie/${movieId}?${params}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n  const params = new URLSearchParams({\n    api_key: APIKEY,\n  });\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits?${params}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  const params = new URLSearchParams({\n    api_key: APIKEY,\n  });\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews?${params}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["BadRequestWrapper","styled","BadRequest","children","size","CastWrapper","CastItem","useState","movieCast","setMovieCast","movieId","useParams","empty","setEmpty","useEffect","getMovieCredits","then","response","cast","length","map","id","name","profile_path","src","alt","APIKEY","getTrendingMovies","params","URLSearchParams","api_key","axios","data","console","log","getMoviesByQuery","searchQuery","query","page","include_adult","getMovieByID","getMovieReviews"],"sourceRoot":""}